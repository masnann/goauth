// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	models "go-auth/models"

	mock "github.com/stretchr/testify/mock"
)

// PermissionRepositoryInterface is an autogenerated mock type for the PermissionRepositoryInterface type
type PermissionRepositoryInterface struct {
	mock.Mock
}

// AssignRoleToUserRequest provides a mock function with given fields: req
func (_m *PermissionRepositoryInterface) AssignRoleToUserRequest(req models.AssignRoleToUserRequest) error {
	ret := _m.Called(req)

	if len(ret) == 0 {
		panic("no return value specified for AssignRoleToUserRequest")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(models.AssignRoleToUserRequest) error); ok {
		r0 = rf(req)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreatePermission provides a mock function with given fields: req
func (_m *PermissionRepositoryInterface) CreatePermission(req models.PermissionModels) (int64, error) {
	ret := _m.Called(req)

	if len(ret) == 0 {
		panic("no return value specified for CreatePermission")
	}

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(models.PermissionModels) (int64, error)); ok {
		return rf(req)
	}
	if rf, ok := ret.Get(0).(func(models.PermissionModels) int64); ok {
		r0 = rf(req)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(models.PermissionModels) error); ok {
		r1 = rf(req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateRole provides a mock function with given fields: req
func (_m *PermissionRepositoryInterface) CreateRole(req models.RolesModels) (int64, error) {
	ret := _m.Called(req)

	if len(ret) == 0 {
		panic("no return value specified for CreateRole")
	}

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(models.RolesModels) (int64, error)); ok {
		return rf(req)
	}
	if rf, ok := ret.Get(0).(func(models.RolesModels) int64); ok {
		r0 = rf(req)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(models.RolesModels) error); ok {
		r1 = rf(req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateRolePermission provides a mock function with given fields: req
func (_m *PermissionRepositoryInterface) CreateRolePermission(req models.RolePermissionModels) (int64, error) {
	ret := _m.Called(req)

	if len(ret) == 0 {
		panic("no return value specified for CreateRolePermission")
	}

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(models.RolePermissionModels) (int64, error)); ok {
		return rf(req)
	}
	if rf, ok := ret.Get(0).(func(models.RolePermissionModels) int64); ok {
		r0 = rf(req)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(models.RolePermissionModels) error); ok {
		r1 = rf(req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateUserPermission provides a mock function with given fields: req
func (_m *PermissionRepositoryInterface) CreateUserPermission(req models.UserPermissionModels) (int64, error) {
	ret := _m.Called(req)

	if len(ret) == 0 {
		panic("no return value specified for CreateUserPermission")
	}

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(models.UserPermissionModels) (int64, error)); ok {
		return rf(req)
	}
	if rf, ok := ret.Get(0).(func(models.UserPermissionModels) int64); ok {
		r0 = rf(req)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(models.UserPermissionModels) error); ok {
		r1 = rf(req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindListPermission provides a mock function with given fields:
func (_m *PermissionRepositoryInterface) FindListPermission() ([]models.PermissionModels, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for FindListPermission")
	}

	var r0 []models.PermissionModels
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]models.PermissionModels, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []models.PermissionModels); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.PermissionModels)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindListRole provides a mock function with given fields:
func (_m *PermissionRepositoryInterface) FindListRole() ([]models.RolesModels, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for FindListRole")
	}

	var r0 []models.RolesModels
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]models.RolesModels, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []models.RolesModels); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.RolesModels)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindPermissionsForUser provides a mock function with given fields: userID
func (_m *PermissionRepositoryInterface) FindPermissionsForUser(userID int64) ([]models.UserRolePermissionModels, error) {
	ret := _m.Called(userID)

	if len(ret) == 0 {
		panic("no return value specified for FindPermissionsForUser")
	}

	var r0 []models.UserRolePermissionModels
	var r1 error
	if rf, ok := ret.Get(0).(func(int64) ([]models.UserRolePermissionModels, error)); ok {
		return rf(userID)
	}
	if rf, ok := ret.Get(0).(func(int64) []models.UserRolePermissionModels); ok {
		r0 = rf(userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.UserRolePermissionModels)
		}
	}

	if rf, ok := ret.Get(1).(func(int64) error); ok {
		r1 = rf(userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindUserRole provides a mock function with given fields: userID
func (_m *PermissionRepositoryInterface) FindUserRole(userID int64) (models.FindUserRoleResponse, error) {
	ret := _m.Called(userID)

	if len(ret) == 0 {
		panic("no return value specified for FindUserRole")
	}

	var r0 models.FindUserRoleResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(int64) (models.FindUserRoleResponse, error)); ok {
		return rf(userID)
	}
	if rf, ok := ret.Get(0).(func(int64) models.FindUserRoleResponse); ok {
		r0 = rf(userID)
	} else {
		r0 = ret.Get(0).(models.FindUserRoleResponse)
	}

	if rf, ok := ret.Get(1).(func(int64) error); ok {
		r1 = rf(userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IsRoleHavePermission provides a mock function with given fields: userID, permissionGroup, permissionName
func (_m *PermissionRepositoryInterface) IsRoleHavePermission(userID int64, permissionGroup string, permissionName string) (bool, error) {
	ret := _m.Called(userID, permissionGroup, permissionName)

	if len(ret) == 0 {
		panic("no return value specified for IsRoleHavePermission")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(int64, string, string) (bool, error)); ok {
		return rf(userID, permissionGroup, permissionName)
	}
	if rf, ok := ret.Get(0).(func(int64, string, string) bool); ok {
		r0 = rf(userID, permissionGroup, permissionName)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(int64, string, string) error); ok {
		r1 = rf(userID, permissionGroup, permissionName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IsUserHavePermission provides a mock function with given fields: userID, permissionGroup, permissionName
func (_m *PermissionRepositoryInterface) IsUserHavePermission(userID int64, permissionGroup string, permissionName string) (bool, error) {
	ret := _m.Called(userID, permissionGroup, permissionName)

	if len(ret) == 0 {
		panic("no return value specified for IsUserHavePermission")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(int64, string, string) (bool, error)); ok {
		return rf(userID, permissionGroup, permissionName)
	}
	if rf, ok := ret.Get(0).(func(int64, string, string) bool); ok {
		r0 = rf(userID, permissionGroup, permissionName)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(int64, string, string) error); ok {
		r1 = rf(userID, permissionGroup, permissionName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewPermissionRepositoryInterface creates a new instance of PermissionRepositoryInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewPermissionRepositoryInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *PermissionRepositoryInterface {
	mock := &PermissionRepositoryInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
